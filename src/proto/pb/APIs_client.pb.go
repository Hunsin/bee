// Code generated by protoc-gen-go. DO NOT EDIT.
// source: APIs_client.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	APIs_client.proto

It has these top-level messages:
	Null
	Mart
	MartList
	Query
	Product
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Query_Order int32

const (
	Query_PRICE   Query_Order = 0
	Query_POPULAR Query_Order = 1
)

var Query_Order_name = map[int32]string{
	0: "PRICE",
	1: "POPULAR",
}
var Query_Order_value = map[string]int32{
	"PRICE":   0,
	"POPULAR": 1,
}

func (x Query_Order) String() string {
	return proto.EnumName(Query_Order_name, int32(x))
}
func (Query_Order) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

// An Null is used if no argument is needed when making a request.
type Null struct {
}

func (m *Null) Reset()                    { *m = Null{} }
func (m *Null) String() string            { return proto.CompactTextString(m) }
func (*Null) ProtoMessage()               {}
func (*Null) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// A Mart specifies the information of a mart.
type Mart struct {
	Id   string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Cur  string `protobuf:"bytes,3,opt,name=cur" json:"cur,omitempty"`
}

func (m *Mart) Reset()                    { *m = Mart{} }
func (m *Mart) String() string            { return proto.CompactTextString(m) }
func (*Mart) ProtoMessage()               {}
func (*Mart) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Mart) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Mart) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Mart) GetCur() string {
	if m != nil {
		return m.Cur
	}
	return ""
}

// A MartList contains an array of mart names.
type MartList struct {
	Marts []*Mart `protobuf:"bytes,1,rep,name=marts" json:"marts,omitempty"`
}

func (m *MartList) Reset()                    { *m = MartList{} }
func (m *MartList) String() string            { return proto.CompactTextString(m) }
func (*MartList) ProtoMessage()               {}
func (*MartList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *MartList) GetMarts() []*Mart {
	if m != nil {
		return m.Marts
	}
	return nil
}

// An Query specifies the keyword, number of products are needed
// and how the data are ordered from certain mart. If mart is
// null, the service will return products from all marts available.
// If num <= 0, there is no limit of numbers.
type Query struct {
	Key   string      `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Mart  string      `protobuf:"bytes,2,opt,name=mart" json:"mart,omitempty"`
	Num   int64       `protobuf:"varint,3,opt,name=num" json:"num,omitempty"`
	Order Query_Order `protobuf:"varint,4,opt,name=order,enum=pb.Query_Order" json:"order,omitempty"`
}

func (m *Query) Reset()                    { *m = Query{} }
func (m *Query) String() string            { return proto.CompactTextString(m) }
func (*Query) ProtoMessage()               {}
func (*Query) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Query) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Query) GetMart() string {
	if m != nil {
		return m.Mart
	}
	return ""
}

func (m *Query) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *Query) GetOrder() Query_Order {
	if m != nil {
		return m.Order
	}
	return Query_PRICE
}

// A Product specifies the information of a product.
type Product struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Image string `protobuf:"bytes,2,opt,name=image" json:"image,omitempty"`
	Page  string `protobuf:"bytes,3,opt,name=page" json:"page,omitempty"`
	Price int64  `protobuf:"varint,4,opt,name=price" json:"price,omitempty"`
	Mart  string `protobuf:"bytes,5,opt,name=mart" json:"mart,omitempty"`
}

func (m *Product) Reset()                    { *m = Product{} }
func (m *Product) String() string            { return proto.CompactTextString(m) }
func (*Product) ProtoMessage()               {}
func (*Product) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Product) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Product) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *Product) GetPage() string {
	if m != nil {
		return m.Page
	}
	return ""
}

func (m *Product) GetPrice() int64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Product) GetMart() string {
	if m != nil {
		return m.Mart
	}
	return ""
}

func init() {
	proto.RegisterType((*Null)(nil), "pb.Null")
	proto.RegisterType((*Mart)(nil), "pb.Mart")
	proto.RegisterType((*MartList)(nil), "pb.MartList")
	proto.RegisterType((*Query)(nil), "pb.Query")
	proto.RegisterType((*Product)(nil), "pb.Product")
	proto.RegisterEnum("pb.Query_Order", Query_Order_name, Query_Order_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Crawler service

type CrawlerClient interface {
	// Search returns the Products which match given Query.
	// The service DOES NOT GUARANTEE the order of Products since
	// they may come from various mart.
	Search(ctx context.Context, in *Query, opts ...grpc.CallOption) (Crawler_SearchClient, error)
	// Marts returns a list of marts are available in the service.
	Marts(ctx context.Context, in *Null, opts ...grpc.CallOption) (*MartList, error)
}

type crawlerClient struct {
	cc *grpc.ClientConn
}

func NewCrawlerClient(cc *grpc.ClientConn) CrawlerClient {
	return &crawlerClient{cc}
}

func (c *crawlerClient) Search(ctx context.Context, in *Query, opts ...grpc.CallOption) (Crawler_SearchClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Crawler_serviceDesc.Streams[0], c.cc, "/pb.Crawler/Search", opts...)
	if err != nil {
		return nil, err
	}
	x := &crawlerSearchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Crawler_SearchClient interface {
	Recv() (*Product, error)
	grpc.ClientStream
}

type crawlerSearchClient struct {
	grpc.ClientStream
}

func (x *crawlerSearchClient) Recv() (*Product, error) {
	m := new(Product)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *crawlerClient) Marts(ctx context.Context, in *Null, opts ...grpc.CallOption) (*MartList, error) {
	out := new(MartList)
	err := grpc.Invoke(ctx, "/pb.Crawler/Marts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Crawler service

type CrawlerServer interface {
	// Search returns the Products which match given Query.
	// The service DOES NOT GUARANTEE the order of Products since
	// they may come from various mart.
	Search(*Query, Crawler_SearchServer) error
	// Marts returns a list of marts are available in the service.
	Marts(context.Context, *Null) (*MartList, error)
}

func RegisterCrawlerServer(s *grpc.Server, srv CrawlerServer) {
	s.RegisterService(&_Crawler_serviceDesc, srv)
}

func _Crawler_Search_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Query)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CrawlerServer).Search(m, &crawlerSearchServer{stream})
}

type Crawler_SearchServer interface {
	Send(*Product) error
	grpc.ServerStream
}

type crawlerSearchServer struct {
	grpc.ServerStream
}

func (x *crawlerSearchServer) Send(m *Product) error {
	return x.ServerStream.SendMsg(m)
}

func _Crawler_Marts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Null)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrawlerServer).Marts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Crawler/Marts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrawlerServer).Marts(ctx, req.(*Null))
	}
	return interceptor(ctx, in, info, handler)
}

var _Crawler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Crawler",
	HandlerType: (*CrawlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Marts",
			Handler:    _Crawler_Marts_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Search",
			Handler:       _Crawler_Search_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "APIs_client.proto",
}

func init() { proto.RegisterFile("APIs_client.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 330 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x51, 0xcd, 0x4e, 0xf3, 0x30,
	0x10, 0xac, 0x93, 0xb8, 0x3f, 0xdb, 0x4f, 0xfd, 0xca, 0x8a, 0x43, 0xd4, 0x03, 0xad, 0x2c, 0x90,
	0x2a, 0x0e, 0x11, 0x2a, 0x57, 0x2e, 0x55, 0xc5, 0xa1, 0x52, 0xa1, 0xc1, 0x88, 0x33, 0x4a, 0x13,
	0x0b, 0x22, 0x92, 0x26, 0x38, 0x8e, 0x50, 0x9f, 0x80, 0xd7, 0x46, 0xeb, 0xb4, 0x81, 0xdb, 0xec,
	0x78, 0xec, 0xf1, 0xcc, 0xc2, 0xd9, 0x32, 0x5c, 0x57, 0xaf, 0x71, 0x96, 0xaa, 0xbd, 0x09, 0x4a,
	0x5d, 0x98, 0x02, 0x9d, 0x72, 0x27, 0xba, 0xe0, 0x3d, 0xd6, 0x59, 0x26, 0xee, 0xc0, 0x7b, 0x88,
	0xb4, 0xc1, 0x11, 0x38, 0x69, 0xe2, 0xb3, 0x19, 0x9b, 0x0f, 0xa4, 0x93, 0x26, 0x88, 0xe0, 0xed,
	0xa3, 0x5c, 0xf9, 0x8e, 0x65, 0x2c, 0xc6, 0x31, 0xb8, 0x71, 0xad, 0x7d, 0xd7, 0x52, 0x04, 0xc5,
	0x35, 0xf4, 0xe9, 0xf6, 0x26, 0xad, 0x0c, 0x5e, 0x00, 0xcf, 0x23, 0x6d, 0x2a, 0x9f, 0xcd, 0xdc,
	0xf9, 0x70, 0xd1, 0x0f, 0xca, 0x5d, 0x40, 0x87, 0xb2, 0xa1, 0xc5, 0x37, 0x03, 0xfe, 0x54, 0x2b,
	0x7d, 0xa0, 0x77, 0x3e, 0xd4, 0xe1, 0x68, 0x46, 0x90, 0xdc, 0x48, 0x74, 0x72, 0x23, 0x4c, 0xaa,
	0x7d, 0x9d, 0x5b, 0x37, 0x57, 0x12, 0xc4, 0x2b, 0xe0, 0x85, 0x4e, 0x94, 0xf6, 0xbd, 0x19, 0x9b,
	0x8f, 0x16, 0xff, 0xc9, 0xc1, 0xbe, 0x18, 0x6c, 0x89, 0x96, 0xcd, 0xa9, 0x98, 0x02, 0xb7, 0x33,
	0x0e, 0x80, 0x87, 0x72, 0xbd, 0xba, 0x1f, 0x77, 0x70, 0x08, 0xbd, 0x70, 0x1b, 0xbe, 0x6c, 0x96,
	0x72, 0xcc, 0xc4, 0x27, 0xf4, 0x42, 0x5d, 0x24, 0x75, 0x6c, 0xda, 0x98, 0xec, 0x4f, 0xcc, 0x73,
	0xe0, 0x69, 0x1e, 0xbd, 0x9d, 0xb2, 0x37, 0x03, 0x29, 0x4b, 0x22, 0x9b, 0xf4, 0x16, 0x93, 0xb2,
	0xd4, 0x69, 0xac, 0xec, 0x87, 0x5c, 0xd9, 0x0c, 0x6d, 0x18, 0xfe, 0x1b, 0x66, 0x11, 0x42, 0x6f,
	0xa5, 0xa3, 0xaf, 0x4c, 0x69, 0xbc, 0x84, 0xee, 0xb3, 0x8a, 0x74, 0xfc, 0x8e, 0x83, 0x36, 0xc0,
	0x64, 0x48, 0xf0, 0xf8, 0x29, 0xd1, 0xb9, 0x61, 0x38, 0x05, 0x4e, 0xe5, 0x55, 0x68, 0x7b, 0xa4,
	0x55, 0x4d, 0xfe, 0x9d, 0x1a, 0xa5, 0xba, 0x77, 0x5d, 0xbb, 0xcb, 0xdb, 0x9f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x13, 0x2d, 0x1f, 0x99, 0xe0, 0x01, 0x00, 0x00,
}
